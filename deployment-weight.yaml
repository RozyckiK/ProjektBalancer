#---------------------------------------------------------------------------------------------------
#-----------------------------------------| Namespace  |--------------------------------------------
#---------------------------------------------------------------------------------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: projekt-balancer
---
#---------------------------------------------------------------------------------------------------
#-----------------------------------| ConfigMap: grafana-datasources |----------------------------
#---------------------------------------------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: projekt-balancer
data:
  datasource.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
---
#---------------------------------------------------------------------------------------------------
#------------------------------| ConfigMap: grafana-dashboards |------------------------------------
#---------------------------------------------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: projekt-balancer
data:
  # 1) Plik provisioningowy, który mówi Grafanie, żeby szukała dashboardów w /var/lib/grafana/dashboards
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        options:
          path: /var/lib/grafana/dashboards

  projekt-balancer-dashboard.json: |
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": {
              "type": "grafana",
              "uid": "-- Grafana --"
            },
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "fiscalYearStartMonth": 0,
      "graphTooltip": 0,
      "id": 1,
      "links": [],
      "panels": [
        {
          "datasource": {
            "name": "Prometheus",
            "type": "prometheus"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisBorderShow": false,
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "barWidthFactor": 0.6,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "insertNulls": false,
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "ms"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 0
          },
          "id": 2,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "hidden",
              "placement": "right",
              "showLegend": false
            },
            "tooltip": {
              "hideZeros": false,
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "12.0.2",
          "targets": [
            {
              "editorMode": "code",
              "expr": "avg_over_time(kafka_consumer_avg_latency_ms[2m])",
              "legendFormat": "__auto",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Kafka consumer latency",
          "type": "timeseries"
        },
        {
          "datasource": {
            "name": "Prometheus",
            "type": "prometheus"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisBorderShow": false,
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "barWidthFactor": 0.6,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "insertNulls": false,
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "%"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 0
          },
          "id": 3,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "hideZeros": false,
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "12.0.2",
          "targets": [
            {
              "editorMode": "code",
              "expr": "(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100",
              "legendFormat": "__auto",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "RAM usage",
          "type": "timeseries"
        },
        {
          "datasource": {
            "name": "Prometheus",
            "type": "prometheus"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisBorderShow": false,
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "barWidthFactor": 0.6,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "insertNulls": false,
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "reqps"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 8
          },
          "id": 1,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "hideZeros": false,
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "12.0.2",
          "targets": [
            {
              "editorMode": "code",
              "expr": "target_rps",
              "legendFormat": "__auto",
              "range": true,
              "refId": "Target RPS"
            }
          ],
          "title": "Requests per second",
          "type": "timeseries"
        },
        {
          "datasource": {
            "name": "Prometheus",
            "type": "prometheus"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisBorderShow": false,
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "barWidthFactor": 0.6,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "insertNulls": false,
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "%"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 8
          },
          "id": 4,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "hideZeros": false,
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "12.0.2",
          "targets": [
            {
              "editorMode": "code",
              "expr": "100 * sum by(instance) ( rate(node_cpu_seconds_total{mode!=\"idle\"}[1m]) ) / sum by(instance) ( rate(node_cpu_seconds_total[1m]) )",
              "legendFormat": "__auto",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "CPU usage",
          "type": "timeseries"
        }
      ],
      "preload": false,
      "schemaVersion": 41,
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-15m",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "browser",
      "title": "Projekt balancer",
      "uid": "3ab20b81-36ab-4603-9239-ec8af248a85b",
      "version": 1
    }
---
#---------------------------------------------------------------------------------------------------
#-----------------------------------------| Deployment: Grafana  |---------------------------------
#---------------------------------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: projekt-balancer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: "admin"
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "admin"
            - name: GF_SECURITY_DISABLE_INITIAL_ADMIN_CHANGE_PASSWORD
              value: "true"
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          ports:
            - containerPort: 3000
          volumeMounts:
            # 1) Konfiguracja datasource
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            # 2) Plik provisioningowy dashboards.yaml
            - name: grafana-dashboards-provisioning
              mountPath: /etc/grafana/provisioning/dashboards
            # 3) Sam JSON dashboardu
            - name: grafana-dashboards-data
              mountPath: /var/lib/grafana/dashboards/projekt-balancer-dashboard.json
              subPath: projekt-balancer-dashboard.json
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "250m"
      volumes:
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboards-provisioning
          configMap:
            name: grafana-dashboards
            items:
              - key: dashboards.yaml
                path: dashboards.yaml
        - name: grafana-dashboards-data
          configMap:
            name: grafana-dashboards
            items:
              - key: projekt-balancer-dashboard.json
                path: projekt-balancer-dashboard.json
---
#---------------------------------------------------------------------------------------------------
#------------------------------------------| Service: Grafana  |----------------------------------
#---------------------------------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: projekt-balancer
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
      nodePort: 32000
---





#--------------------------------------------------------------------------------------------------------
#-----------------------------------------|   Kafka consumer   |-----------------------------------------
#--------------------------------------------------------------------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-consumer
  namespace: projekt-balancer
  labels:
    app: kafka-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-consumer
  template:
    metadata:
      labels:
        app: kafka-consumer
    spec:
      containers:
      - name: kafka-consumer
        image: rozyckik/kafka-consumer:latest
        ports:
        - name: metrics
          containerPort: 8000
        env:
        - name: KAFKA_BROKERS
          value: "kafka-proxy:19092"
        - name: KAFKA_TOPIC
          value: "test-topic"
        - name: KAFKA_GROUP
          value: "project-balancer-consumer"
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-consumer
  namespace: projekt-balancer
spec:
  selector:
    app: kafka-consumer
  ports:
  - name: metrics
    port: 8000
    targetPort: 8000
---





#-----------------------------------------------------------------------------------------------
#-----------------------------------------|   Kafka-1   |---------------------------------------
#-----------------------------------------------------------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-1
  namespace: projekt-balancer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-1
  template:
    metadata:
      labels:
        app: kafka-1
    spec:
      containers:
      - name: kafka
        image: bitnami/kafka:3.4.0
        ports:
          - containerPort: 9092
        env:
          - name: KAFKA_BROKER_ID
            value: "1"
          - name: KAFKA_CFG_ZOOKEEPER_CONNECT
            value: "zookeeper:2181"
          - name: KAFKA_CFG_LISTENERS
            value: "PLAINTEXT://:9092"
          - name: KAFKA_CFG_ADVERTISED_LISTENERS
            value: "PLAINTEXT://kafka-1:9092"
          - name: ALLOW_PLAINTEXT_LISTENER
            value: "yes"
          - name: KAFKA_ENABLE_KRAFT
            value: "false"
          - name: KAFKA_CFG_LOG_RETENTION_MS
            value: "60000"       # 60s w ms
          - name: KAFKA_CFG_LOG_RETENTION_BYTES
            value: "-1"            # brak limitu po rozmiarze
          - name: KAFKA_CFG_LOG_SEGMENT_BYTES
            value: "1073741824"    # 1 GiB
        resources:
          requests:
            memory: "512Mi"
            cpu: "400m"
          limits:
            memory: "1024Mi"
            cpu: "800m"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-1
  namespace: projekt-balancer
spec:
  selector:
    app: kafka-1
  ports:
    - port: 9092
      targetPort: 9092
---





#-----------------------------------------------------------------------------------------------
#-----------------------------------------|   Kafka-2   |---------------------------------------
#-----------------------------------------------------------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-2
  namespace: projekt-balancer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-2
  template:
    metadata:
      labels:
        app: kafka-2
    spec:
      containers:
      - name: kafka
        image: bitnami/kafka:3.4.0
        ports:
          - containerPort: 9092
        env:
          - name: KAFKA_BROKER_ID
            value: "2"
          - name: KAFKA_CFG_ZOOKEEPER_CONNECT
            value: "zookeeper:2181"
          - name: KAFKA_CFG_LISTENERS
            value: "PLAINTEXT://:9092"
          - name: KAFKA_CFG_ADVERTISED_LISTENERS
            value: "PLAINTEXT://kafka-2:9092"
          - name: ALLOW_PLAINTEXT_LISTENER
            value: "yes"
          - name: KAFKA_ENABLE_KRAFT
            value: "false"
          - name: KAFKA_CFG_LOG_RETENTION_MS
            value: "60000"       # 60s w ms
          - name: KAFKA_CFG_LOG_RETENTION_BYTES
            value: "-1"            # brak limitu po rozmiarze
          - name: KAFKA_CFG_LOG_SEGMENT_BYTES
            value: "1073741824"    # 1 GiB
        resources:
          requests:
            memory: "512Mi"
            cpu: "400m"
          limits:
            memory: "1024Mi"
            cpu: "800m"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-2
  namespace: projekt-balancer
spec:
  selector:
    app: kafka-2
  ports:
    - port: 9092
      targetPort: 9092
---





#-----------------------------------------------------------------------------------------------
#-----------------------------------------|   Kafka-3   |---------------------------------------
#-----------------------------------------------------------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-3
  namespace: projekt-balancer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-3
  template:
    metadata:
      labels:
        app: kafka-3
    spec:
      containers:
      - name: kafka
        image: bitnami/kafka:3.4.0
        ports:
          - containerPort: 9092
        env:
          - name: KAFKA_BROKER_ID
            value: "3"
          - name: KAFKA_CFG_ZOOKEEPER_CONNECT
            value: "zookeeper:2181"
          - name: KAFKA_CFG_LISTENERS
            value: "PLAINTEXT://:9092"
          - name: KAFKA_CFG_ADVERTISED_LISTENERS
            value: "PLAINTEXT://kafka-3:9092"
          - name: ALLOW_PLAINTEXT_LISTENER
            value: "yes"
          - name: KAFKA_ENABLE_KRAFT
            value: "false"
          - name: KAFKA_CFG_LOG_RETENTION_MS
            value: "60000"       # 60s w ms
          - name: KAFKA_CFG_LOG_RETENTION_BYTES
            value: "-1"            # brak limitu po rozmiarze
          - name: KAFKA_CFG_LOG_SEGMENT_BYTES
            value: "1073741824"    # 1 GiB
        resources:
          requests:
            memory: "512Mi"
            cpu: "400m"
          limits:
            memory: "1024Mi"
            cpu: "800m"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-3
  namespace: projekt-balancer
spec:
  selector:
    app: kafka-3
  ports:
    - port: 9092
      targetPort: 9092
---





#--------------------------------------------------------------------------------------------------------
#-----------------------------------------|   load generator   |-----------------------------------------
#--------------------------------------------------------------------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-generator
  namespace: projekt-balancer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: load-generator
  template:
    metadata:
      labels:
        app: load-generator
    spec:
      containers:
      - name: generator
        image: rozyckik/load-generator:latest
        args:
          - "--pattern=ramp"
          - "--min-rps=1"
          - "--max-rps=400"
          - "--duration=600"      # cały test 300s (5 min)
          - "--step-time=30"      # co 30s ramp-up
          - "--bootstrap=kafka-proxy:19092"
          - "--topic=test-topic"
          - "--metrics-port=8000"
        ports:
        - containerPort: 8000
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
---
apiVersion: v1
kind: Service
metadata:
  name: load-generator-metrics
  namespace: projekt-balancer
spec:
  ports:
  - port: 8000
    targetPort: 8000
    name: metrics
  selector:
    app: load-generator
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: load-gen-config
  namespace: projekt-balancer
data:
  PATTERN:      "ramp"
  MIN_RPS:      "100"
  MAX_RPS:      "10000"
  DURATION:     "600"
  STEP_TIME:    "30"
  BOOTSTRAP:    "kafka:9092"
  TOPIC:        "test-topic"
  METRICS_PORT: "8000"
---





#-------------------------------------------------------------------------------------------------------
#-----------------------------------------|   Node exporter   |-----------------------------------------
#-------------------------------------------------------------------------------------------------------

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: projekt-balancer
spec:
  selector:
    matchLabels:
      app: node-exporter
  template:
    metadata:
      labels:
        app: node-exporter
    spec:
      hostNetwork: true
      hostPID: true
      containers:
        - name: node-exporter
          image: quay.io/prometheus/node-exporter:latest
          ports:
            - containerPort: 9100
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "250m"
---
apiVersion: v1
kind: Service
metadata:
  name: node-exporter
  namespace: projekt-balancer
  labels:
    app: node-exporter
spec:
  selector:
    app: node-exporter
  ports:
    - name: metrics
      protocol: TCP
      port: 9100
      targetPort: 9100
---





#----------------------------------------------------------------------------------------------------
#-----------------------------------------|   Prometheus   |-----------------------------------------
#----------------------------------------------------------------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: projekt-balancer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          ports:
            - containerPort: 9090
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
          volumeMounts:
            - name: config-volume
              mountPath: /etc/prometheus
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "250m"
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: projekt-balancer
data:
  prometheus.yml: |
    global:
      scrape_interval: 2s
      scrape_timeout: 1s
    scrape_configs:
      - job_name: 'publisher'
        static_configs:
          - targets: ['publisher:8000']
      - job_name: 'kafka-consumer'
        static_configs:
          - targets: ['kafka-consumer:8000']
      - job_name: 'load-generator'
        static_configs:
          - targets: ['load-generator-metrics:8000']
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names: ['projekt-balancer']
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_label_app]
            action: keep
            regex: node-exporter
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
          - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
            action: replace
            target_label: instance
            regex: Node;(.+)
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: projekt-balancer
spec:
  type: NodePort
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
      nodePort: 32090
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: prometheus-scrape
  namespace: projekt-balancer
rules:
  - apiGroups: [""]              # core API group
    resources:
      - services
      - endpoints
      - pods
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prometheus-scrape-binding
  namespace: projekt-balancer
subjects:
  - kind: ServiceAccount
    name: default           # lub inna nazwa ServiceAccount, jeśli Prometheus działa pod dedykowanym SA
    namespace: projekt-balancer
roleRef:
  kind: Role
  name: prometheus-scrape
  apiGroup: rbac.authorization.k8s.io
---





#---------------------------------------------------------------------------------------------------
#-----------------------------------------|   Publisher   |-----------------------------------------
#---------------------------------------------------------------------------------------------------

#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: publisher
#  namespace: projekt-balancer
#  labels:
#    app: publisher
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: publisher
#  template:
#    metadata:
#      labels:
#        app: publisher
#    spec:
#      containers:
#      - name: publisher
#        image: rozyckik/publisher:latest
#        ports:
#        - containerPort: 8000
#        env:
#        - name: PYTHONUNBUFFERED
#          value: "1"
#        resources:
#            requests:
#              memory: "128Mi"
#              cpu: "100m"
#            limits:
#              memory: "256Mi"
#              cpu: "250m"
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: publisher
#  namespace: projekt-balancer
#spec:
#  selector:
#    app: publisher
#  ports:
#    - protocol: TCP
#      port: 8000
#      targetPort: 8000
#---





#---------------------------------------------------------------------------------------------------
#-----------------------------------------|   Zookeeper   |-----------------------------------------
#---------------------------------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: projekt-balancer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: bitnami/zookeeper:latest
          env:
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
          ports:
            - containerPort: 2181
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "250m"

---
#Service
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: projekt-balancer
spec:
  selector:
    app: zookeeper
  ports:
    - port: 2181
      targetPort: 2181
---





#---------------------------------------------------------------------------------------------------
#----------------------------|                Load-balancing types                  |---------------
#----------------------------|                    Round Robin                       |---------------
#---------------------------------------------------------------------------------------------------

apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-proxy-config-rr
  namespace: projekt-balancer
data:
  nginx.conf: |
    # uwaga: to jest minimalna konfiguracja NGINX w trybie TCP stream
    worker_processes  1;
    events {
      worker_connections  1024;
    }
    stream {
      upstream kafka_cluster {
        # Domyślnie NGINX używa Round Robin, więc nie musimy dodawać żadnych dyrektyw.
        server kafka-1:9092;
        server kafka-2:9092;
        server kafka-3:9092;
      }

      server {
        listen 19092;        # port, na którym nasłuchuje proxy w klastrze
        proxy_pass kafka_cluster;
        # (opcjonalnie) timeouty:
        proxy_timeout 10s;
        proxy_connect_timeout 5s;
      }
    }
---




#---------------------------------------------------------------------------------------------------
#-----------------------------------------|   Load-balancing types   |------------------------------
#-----------------------------------------|     Least Connections    |------------------------------
#---------------------------------------------------------------------------------------------------

apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-proxy-config-least
  namespace: projekt-balancer
data:
  nginx.conf: |
    worker_processes  1;
    events {
      worker_connections  1024;
    }
    stream {
      upstream kafka_cluster {
        least_conn;              # dyrektywa włącza „Least Connections”
        server kafka-1:9092;
        server kafka-2:9092;
        server kafka-3:9092;
      }

      server {
        listen 19092;
        proxy_pass kafka_cluster;
        proxy_timeout 10s;
        proxy_connect_timeout 5s;
      }
    }
---




#---------------------------------------------------------------------------------------------------
#-----------------------------------------|   Load-balancing types   |------------------------------
#-----------------------------------------|     Least Connections    |------------------------------
#---------------------------------------------------------------------------------------------------

apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-proxy-config-weight
  namespace: projekt-balancer
data:
  nginx.conf: |
    worker_processes  1;
    events {
      worker_connections  1024;
    }
    stream {
      upstream kafka_cluster {
        # Przykładowe wagi; można je dostosować w zależności od zasobów brokerów
        server kafka-1:9092 weight=1;
        server kafka-2:9092 weight=2;
        server kafka-3:9092 weight=1;
      }

      server {
        listen 19092;
        proxy_pass kafka_cluster;
        proxy_timeout 10s;
        proxy_connect_timeout 5s;
      }
    }
---


#--------------------------------------------------------------------------------------------------
#-----------------------------------------|       Kafka-proxy       |------------------------------
#--------------------------------------------------------------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-proxy
  namespace: projekt-balancer
spec:
  replicas: 3
  selector:
    matchLabels:
      app: kafka-proxy
  template:
    metadata:
      labels:
        app: kafka-proxy
    spec:
      containers:
      - name: nginx
        image: nginx:stable-alpine
        args:
          - "/bin/sh"
          - "-c"
          - |
            # przy starcie kopiujemy naszą konfigurację i uruchamiamy NGINX w trybie demonless
            cp /etc/nginx-custom/nginx.conf /etc/nginx/nginx.conf && \
            nginx -g 'daemon off;'
        ports:
          - containerPort: 19092
        volumeMounts:
          - name: nginx-conf
            mountPath: /etc/nginx-custom    # tu będzie nasz plik nginx.conf
        resources:
          requests:
            memory: "100Mi"
            cpu: "50m"
          limits:
            memory: "200Mi"
            cpu: "100m"
      volumes:
        - name: nginx-conf
          configMap:
            # --- Uncomment needed load balancing type ---
            #name: kafka-proxy-config-rr
            #name: kafka-proxy-config-least
            name: kafka-proxy-config-weight
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-proxy
  namespace: projekt-balancer
spec:
  type: NodePort
  selector:
    app: kafka-proxy
  ports:
    - name: tcp-kafka
      protocol: TCP
      port: 19092
      targetPort: 19092